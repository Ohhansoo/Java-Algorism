package com.algorism.dataStructure.stackAndQueue;

import java.io.IOException;

/**
 * 스택과 큐는 배열에서 발전된 형태의 자료구조이다.
 * 스택과 큐는 구조는 비슷하지만 처리 방식이 다르다.
 * */

/******** 스택(stack) ********
 *  삽입과 삭제 연산이 후입선출(LIFO)로 이뤄지는 자료구조
 *  후입선출은 삽입과 삭제가 한 곳에서만 일어나는 특징
 *  주로 깊이 우선 탐색(DFS), 백트래킹에 많이 사용
 *  [용어]
 *  top : 삽ㅇ입과 삭제가 일어나는 위치
 *  push : top 위치에 새로운 데이터를 삽입하는 연산
 *  pop : top 위치에 현재 있는 데이터를 삭제하고 확인하는 연산
 *  peek : top 위치에 현재 있는 데이터를 단순 확인하는 연산
 */

/******** 큐(QUEUE) ********
 *  삽입과 삭제 연산이 선입선출(FIFO)로 이뤄지는 자료구조
 *  선입선출은 먼저 들어온 데이터가 먼저 나가는 방식, 따라서 삽입 삭제가 양방향에서 이뤄진다
 *  주로 너비 우선 탐색(BFS)에서 자주 사용된다
 *  [용어]
 *  rear : 큐에서 가장 끝 데이터를 가리키는 영역
 *  front : 큐에서 가장 앞의 데이터를 가리키는 영역
 *  add : rear 부분에 새로운 데이터를 삽입하는 연산
 *  poll : front 부분에 있는 데이터를 삭제하고 확인하는 연산
 *  peek : 큐의 맨 앞(front)에 있는 데이터를 확인할 때 사용하는 연산
 */

public class StackAndQueue {

    public static void main(String[] args) throws IOException {

        StackAndQueue_Answer myAnswer = new StackAndQueue_Answer();


        //문제 1(03-5-011) : 스택으로 오름차순 수열 만들기
        //입력 : 임의의 수열을 슽택에 넣었다가 출력하는 방식으로 오름차순 수열을 출력할 수 있는지 확인한다
        //      출력할 수 있다면 push와 pop 연산을 어떤 순서로 수행해야 하는지 알아내는 프로그램을 만들어보자
        //출력 : 오름차순 수열을 만들기 위한 연산 순서를 출력한다.
        //      push 연산은 +, pop 연산은 -로 출력하고, 불가능 할 때는 NO를 출력한다.
        //[예제 입력1] : 8 (수열의 개수)
        //              4 3 6 8 7 5 2 1
        //[예제 출력1] : + + + + - - + + - + + - - - - -
        System.out.println("문제 1(03-5-011) : 스택으로 오름차순 수열 만들기");
        //myAnswer.ascendingSequence();

        //문제 2(03-5-012) : 오큰수 구하기
        //입력 : 1번째 줄에 수열 A의 크기 N(1 <= N <= 1,000,000)
        //      2번째 줄에 수열 A의 원수 A1, A2, ..., AN (1 <= Ai <= 1,000,000)
        //출력 : 총 N개의 수 NGE(1), NGE(2), ..., NGE(N)을 공백으로 구분해 출력한다.
        //[예제 입력1] : 4 (수열의 크기)
        //              3 5 2 7
        //[예제 출력1] : 5 7 7 -1
        System.out.println("문제 2(03-5-012) : 오큰수 구하기");
        //myAnswer.rightBigNum();

        //문제 3(03-5-013) : 카드 게임
        //입력 : 1번째 줄에 정수 N(1 <= N <= 500,000)
        //출력 : 1번째 줄에 남는 카드의 번호를 출력한다
        //[예제 입력1] : 6 (카드 개수)
        //[예제 출력1] : 4
        System.out.println("문제 3(03-5-013) : 카드 게임");
        //myAnswer.cardGame();

        //문제 4(03-5-014) : 절대값 힙 구현하기
        //입력 : 1번째 줄에 연산의 개수 N(1 <= N <= 100,000)이 주어진다.
        //      다음 N개의 줄에는 연산과 관련된 정보를 나타내는 정수 X가 주어진다.
        //      만약 x가 0이 아니라면 배열에 x라는 값을 추가하고, x가 0이라면 배열에서 절대값이 가장 작은 값을 출력하고, 그 값을 배열에서 제거한다.
        //      입력되는 정수는 -231보다 크고, 231보다 작다
        //출력 : 입력에서 0이 주어진 횟수만큼 답을 출력한다. 만약 배열이 비어 있는데 절대값이 가장 작은 값을 출력하라고 할 떄는 0을 출력하면 된다.
        //[예제 입력1] : 18 (연산의 개수)
        //              1 -1 0 0 0 1 1 -1 -1 2 -2 0 0 0 0 0 0 0 {줄바꿈형식}
        //[예제 출력1] : -1 1 0 -1 -1 11 -2 2 0
        System.out.println("문제 4(03-5-014) : 절대값 힙 구현하기");
        myAnswer.absoluteValHeap();

    }
}
