package com.algorism.graph.topologySort;

import java.io.IOException;


/**
 * 위상 정렬 : 사이클이 없는 방향 그래프에서 노드 순서를 찾는 알고리즘
 *            항상 유힐한 값으로 정렬되지 않고, 사이클이 존재하면 노드간의 순서를 명확하게 정의할 수 없어 사용 불가
 * [위상 정렬]
 *  기능 : 노드 간의 순서를 결정
 *  특징 : 사이클이 없어야 함
 *  시간 복잡도(노드 수 : V, 에지 수 : E)
 *
 * [원리 이해]
 *  진입 차수(in-degree) : 자기 자신을 가리키는 에지의 개수
 * */
public class TopologySort {
    public static void main(String[] args) throws IOException {
        TopologySort_MyAnswer myAnswer = new TopologySort_MyAnswer();

        //문제 1(08-3-053) : 줄 세우기
        /************************************** 개 요 *************************************
         * N명의 학생들을 키 순서대로 줄을 세우려고 한다. 각 학생의 키를 직접 재서 정렬하면 간단하겠지만,
         * 마땅한 방법이 없어 두 학생의 키를 비교하는 방법을 사용하기로 했다.
         * 그나마도 모든 학생을 비교해 본 것이 아니라 일부 학생들의 키만을 비교해 봤다.
         * 일부 학생들의 키를 비교한 결과가 주어졌을 때 줄을 세우는 프로그램을 작성하시오.
         * */
        //입력 : 1번째 줄에 N(1< = N <= 32,000), M(1 <= M <= 100,000)이 주어진다
        //      M은 키를 비교한 횟수다. 그 다음 M개의 줄에는 키를 비교한 두 학생의 번호 A, B가 주어진다.
        //      이는 학생 A가 학생 B의 앞에 서야 한다는 의미다.
        //      학생들의 번호는 1번부터 N번이다.
        //출력 : 1번째 줄부터 앞에서부터 줄을 세운 결과를 출력한다. 답이 여러 가지일 경우에는 아무거나 출력한다.
        //[예제 입력1] : 4 2
        //              4 2
        //              3 1
        //[예제 출력1] : 4 2 3 1
        System.out.println("문제 1(08-3-053) : 줄 세우기");
        myAnswer.lineUp();

    }

}
