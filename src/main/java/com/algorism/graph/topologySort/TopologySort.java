package com.algorism.graph.topologySort;

import java.io.IOException;


/**
 * 위상 정렬 : 사이클이 없는 방향 그래프에서 노드 순서를 찾는 알고리즘
 *            항상 유힐한 값으로 정렬되지 않고, 사이클이 존재하면 노드간의 순서를 명확하게 정의할 수 없어 사용 불가
 * [위상 정렬]
 *  기능 : 노드 간의 순서를 결정
 *  특징 : 사이클이 없어야 함
 *  시간 복잡도(노드 수 : V, 에지 수 : E)
 *
 * [원리 이해]
 *  진입 차수(in-degree) : 자기 자신을 가리키는 에지의 개수
 * */
public class TopologySort {
    public static void main(String[] args) throws IOException {
        TopologySort_MyAnswer myAnswer = new TopologySort_MyAnswer();

        //문제 1(08-3-053) : 줄 세우기
        /************************************** 개 요 *************************************
         * N명의 학생들을 키 순서대로 줄을 세우려고 한다. 각 학생의 키를 직접 재서 정렬하면 간단하겠지만,
         * 마땅한 방법이 없어 두 학생의 키를 비교하는 방법을 사용하기로 했다.
         * 그나마도 모든 학생을 비교해 본 것이 아니라 일부 학생들의 키만을 비교해 봤다.
         * 일부 학생들의 키를 비교한 결과가 주어졌을 때 줄을 세우는 프로그램을 작성하시오.
         * */
        //입력 : 1번째 줄에 N(1< = N <= 32,000), M(1 <= M <= 100,000)이 주어진다
        //      M은 키를 비교한 횟수다. 그 다음 M개의 줄에는 키를 비교한 두 학생의 번호 A, B가 주어진다.
        //      이는 학생 A가 학생 B의 앞에 서야 한다는 의미다.
        //      학생들의 번호는 1번부터 N번이다.
        //출력 : 1번째 줄부터 앞에서부터 줄을 세운 결과를 출력한다. 답이 여러 가지일 경우에는 아무거나 출력한다.
        //[예제 입력1] : 4 2
        //              4 2
        //              3 1
        //[예제 출력1] : 4 2 3 1
        System.out.println("문제 1(08-3-053) : 줄 세우기");
        myAnswer.lineUp();

        //문제 2(08-3-054) : 게임 개발하기
        /************************************** 개 요 *************************************
         * 모든 건물을 짓는 데 걸리는 최소의 시간을 이용해 전체 게임시간을 조절하려 한다.
         * 건물에는 짓는 순서가 정해져 있는 것도 있고, 여러 개의 건물을 동시에 지을 수 있다.
         * N개의 건물을 지을 때 각 건물을 짓기 위해 필요한 최소 시간을 출력하시오.
         * */
        //입력 : 1번째 줄에 N(1< = N <= 500), 그 다음 N개의 줄에는 각 건물을 짓는 데 걸리는 시간과
        //      그 건물을 짓기 위해 먼저 지어야 하는 건물들의 번호가 주어진다.
        //      건물의 번호는 1부터 N까지로 하고, 각 줄은 -1로 끝난다고 가정해 보자.
        //      각 건물을 짓는 데 걸리는 시간은 100,000보다 작거나 같은 자연수이다.
        //출력 : N개의 각 건물이 완성되기까지 걸리는 최소 시간을 출력한다.
        //[예제 입력1] : 5 //건물 종류 수
        //              10 -1
        //              10 1 -1
        //              4 1 -1
        //              4 3 1 -1
        //              3 3 -1
        //[예제 출력1] : 10
        //              20
        //              14
        //              18
        //              17
        System.out.println("문제 2(08-3-054) : 게임 개발하기");
        myAnswer.lineUp();

        //문제 3(08-3-055) : 임계 경로 구하기
        /************************************** 개 요 *************************************
         * 모든 드로가 일방통행이고, 사이클이 없는 나라가 있다.
         * 각 도시에서 여러 사람이 출발해 도착 도시에서 만나기로 하였다.
         * 이들이 출발 도시에서 출발한 후 도착 도시에서 만나기까지 걸리는 최소 시간과
         * 1분도 쉬지 않고 달려야 하는 사람들이 지나는 도로의 수를 계산하는 프로그램을 작성하시오.
         * */
        //입력 : 1번째 줄에 n(1< = n <= 10,000) 2번째 줄에 도로의 개수 m(1 <= m <= 100,000)이 주어진다.
        //      그리고 3번째 줄에서 m+2줄까지 다음과 같은 도로의 정보가 주어진다.
        //      처음에는 도로의 출발 도시의 번호가 주어지고, 그 다음에는 도착 도시의 번호 그리고 마지막에는 이 도로를 지나는 데 걸리는 시간이 주어진다.
        //      도로를 지나가는 시간은 10,000 보다 작거나 같은 자연수다.
        //      그리고 m + 3째 줄에는 지도를 그리는 사람들이 출발하는 출발 도시와 도착 도시가 주어진다.
        //      모든 도시는 출발 도시에서 도달할 수 있고, 모든 도시에서 도착 도시에 도달할 수 있다.
        //출력 : 1번째 줄에 이들이 만나는 시간, 2번째 줄에 1분도 쉬지 않고 달려야 하는 도로의 수가 몇 개인지 출력하라.
        //[예제 입력1] : 7 //도시 수
        //              9 //도로 수
        //              1 2 4
        //              1 3 2
        //              1 4 3
        //              2 6 3
        //              2 7 5
        //              3 5 1
        //              4 6 4
        //              5 6 2
        //              6 7 5
        //              1 7 //시작 도시, 도착 도시
        //[예제 출력1] : 12
        //              5

        System.out.println("문제 3(08-3-055) : 임계 경로 구하기");
        myAnswer.lineUp();

    }

}
