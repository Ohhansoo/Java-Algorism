package com.algorism.graph;

public class graph {
    /*
    * 그래프는 노드와 에지로 구성된 집합
    * 노드는 데이터를 표현하는 단위이고 에지는 노드를 연결
    * 09장에서 공부할 트리도 그래프의 일종
    * 그래프는 여러 알고리즘에 많이 사용되는 자료구조
    * */

    /*
    * 그래프를 구현하는 방법에는 3가지가 있다.
    * 1. 에지 리스트
    * 2. 인접 행렬
    * 3. 인접 리스트
    * */

    /*
    * 1. 에지 리스트
    *   - 내용 : 에지를 중심으로 그래프를 표현.
    *           배열에 출발 노드, 도착 노드를 저장하여 에지를 표현.
    *           또는 출발 노드,. 도착 노드, 가중치를 저장하여 가중치가 있는 에지를 표현
    *           벨만 포드나 크루스칼 알고리즘에 사용하며, 노드 중심 알고리즘에는 잘 사용하지 않음
    *
    *   - 에지 리스트로 가중치 없는 그래프 표현하기
    *          : 가중치 없는 그래프는 출발 노드와 도착 노드만 표현하므로 배열의 행은 2개면 충분
    *            노드는 여러 자료형이 가능하다
    *            방향이 있는 그래프는 순서에 맞게 노드를 배열하는 저장 방식으로 표현
    *            방향이 있는 그래프라면 [1,2]와 [2,1]은 같은 표현
    *
    *   - 에지 리스트로 가중치 있는 그래프 표현
    *           : 가중치가 있는 그래프는 행을 3개로 늘려 3번째 행에 가중치 저장
    *             하지만 특정 노드와 관련되어 있는 에지를 탐색하기는 쉽지 않다
    *
    * 2. 인접 행렬(adjacency matrix)
    *   - 내용 : 2차원 배열을 자료구조로 이용하여 그래프를 표현
    *           인접 행렬은 에지 리스트와 다르게 노드 중심으로 그래프 표현
    *           노드와 관련되어 있는 에지를 탐색하려면 N번 접근해야 하므로 노드 개수에 비해 에지가 적을 땐 공간 효율성이 떨어짐
    *           또한 노드 개수가 많은 경우 2차원 배열 선언 자체를 할 수 없는 결함도 존재(노드 3만개가 넘으면 java heap space 에러)
    *
    *   - 인접 행렬로 가중치 없는 그래프 표현
    *           : 1에서 2를 향하는 에지를 인접 행렬은 1행2열에 1을 저장하는 방식으로 표현
    *             1을 저장하는 이유는 가중치가 없기 때문
    *
    *   - 인접 행렬로 가중치 있는 그래프 표현
    *           : 위와 동일하게 표현하되 1이 아닌 가중치가 들어감
    *
    *
    * 3. 인접 리스트(adjacency list)
    *   - 내용 : ArrayList로 그래프를 표현
    *           노드 개수만큼 ArrayList를 선언
    *           그래프를 구현하는 다른 방법에 비해 구현이 복잡한 편
    *           하지만 노드와 연결되어 있는 에지를 탐색하는 시간이 매우 뛰어나며, 노드 개수가 커도 공간 효율이 좋아 메모리 초과 에러가 나지 않음
    *
    *   - 인접 리스트로 가중치 없는 그래프 표현
    *          : 리스트에 해당 인덱스번호(노드)에 연결되어있는 노드 저장
    *            ex) 노드 1과 연결된 노드 2,3,은 ArrayList[1]에 [2,3]을 연결하는 방식
    *
    *   - 인접 리스트로 가중치 있는 그래프 표현
    *           : 가중치가 있는 경우 자료형을 클래스로 사용
    *             다음은 (도착 노드, 가중치)를 갖는 Node 클래스를 선언하여 ArrayList에 사용
    * */
}
