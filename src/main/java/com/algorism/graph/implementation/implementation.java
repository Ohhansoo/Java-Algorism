package com.algorism.graph.implementation;

import java.io.IOException;

/*
*
* */
public class implementation {

    public static void main(String[] args) throws IOException {
        implementation_MyAnswer myAnswer = new implementation_MyAnswer();

        //문제 1(08-1-046) : 특정 거리의 도시 찾기
        /************************************** 개 요 *************************************
         * 1번부터 N번까지의 도시와 M개의 단방향 도로가 존재하고, 모든 도로의 거리는 1인 도시가 있다.
         * 도시 X로부터 출발해 도달할 수 있는 모든 도시 중 최단 거리가 정확히 K인 모든 도시들의 번호를 출력하시오
         * */
        //입력 : 1번째 줄에 도시의 개수(N), 도로의 개수(M), 거리 정보(K), 출발 도시의 번호(X)가 입력된다
        //      (2 <= N <= 300,000) (1 <= M <= 1,000,000) (1 <= K <= 300,000) (1 <= X <= N)
        //      이후 M개의 줄에 걸쳐 2개의 자연수 A,B가 공백으로 구분돼 주어진다. A번 도시에서 B번 도시로 이동하는 단방향 도로가 존재한다는 뜻이다
        //      (1 <= A,B <= N) 단 A와 B가 같을 수 없다
        //출력 : X로부터 출발해 도달 가능한 도시 중 최단 거리가 K인 모든 도시의 번호를 1줄에 1개씩 오름차순으로 출력한다. 없으면 -1로 출력한다.
        //[예제 입력1] : 4 4 2 1 // 도시 개수, 도로 개수, 거리 정보, 출발 도시 번호
        // :            1 2
        //              1 3
        //              2 3
        //              2 4
        //[예제 출력1]    4
        System.out.println("문제 1(08-1-046) : 특정 거리의 도시 찾기");
        myAnswer.findCity4SpecificDistance();

        //문제 2(08-1-047) : 효율적으로 해킹하기
        /************************************** 개 요 *************************************
         * 해커 김지민은 해커다.
         * 신뢰하는 관계와 신뢰하지 않는 관계로 이루어진 N개의 컴퓨터가 있다.
         * A와 B를 신뢰할 경우 B를 해킹하면 A도 해킹할 수 있다.
         * 이 회사의 컴퓨터의 신뢰하는 관계가 주어졌을 때 한 번에 가장 많은 컴퓨터를 해킹할 수 있는 번호를 출력하는 프로그램을 작성하시오
         * */
        //입력 : 1번째 줄에 N과 M이 들어온다. N은 10,000보다 작거나 같은 자연수, M은 100,000보다 작거나 같은 자연수다.
        //      2번째 줄부터 M개의 줄에 신뢰하는 관계가 'A B'와 같은 형식으로 들어오며, 'A가 B를  신뢰한다'를 의미한다.
        //      컴퓨터는 1번부터 N번까지 번호가 1개씩 매겨져 있다.
        //출력 : 1번째 줄에 김지민이 한 번에 가장 많은 컴퓨터를 해킹할 수 있는 컴퓨터의 번호를 오름차순 출력한다.
        //[예제 입력1] : 4 4 2 1 // 도시 개수, 도로 개수, 거리 정보, 출발 도시 번호
        // :            1 2
        //              1 3
        //              2 3
        //              2 4
        //[예제 출력1]    4
        System.out.println("문제 1(08-1-046) : 특정 거리의 도시 찾기");
        myAnswer.findCity4SpecificDistance();


    }

}
